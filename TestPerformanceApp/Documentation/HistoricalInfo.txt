Note: all results are on Windows 10 hosting DB and app on same machine unless otherwise notes
TODO: run tests on Docker Linux setup, compare results.

PerformanceInfoEFCoreVsSproc 9/30/2020:
PerformanceTracker EntityFrameworkCore total  /average speed: 1793 / 17ms.
PerformanceTracker EntityFrameworkCore NoChangeTracking total /average speed: 80 / 0ms.
PerformanceTracker Sproc total / average speed: 71 / 0ms.
Decision: use entities with changetracking off for performance tracker. Keeps DB access consistent and in EFCore.

S2VsPlusCode 9/30/2020:
PlusCode conversion total / average time: 10 / 0 ms
S2 conversion total / average time: 7 / 0 ms
Decision: Sticking to pluscodes. Can do 1000 conversion in 1ms, and still drastically more useful for human-facing stuff than S2 cells.

SplitAreaValues 9/30/2020: (using more local data)
Pulling 223 places in 6-cell took 2029ms
dividing map by 1 took 5108 ms
dividing map by 2 took 1554 ms
dividing map by 4 took 1177 ms
dividing map by 8 took 696 ms
dividing map by 10 took 721 ms
dividing map by 20 took 376 ms
dividing map by 25 took 316 ms
dividing map by 32 took 318 ms
dividing map by 40 took 270 ms
dividing map by 80 took 373 ms
dividing map by 100 took 464 ms
Decision: 40 remains the fastest factor to split a 6cell by.
Additional performance increases were gained during testing, but this function's results stayed proportionate. These are the final results. 

TestSpeedChangeByArea() 10/1/2020: (Using Ohio data only, didn't have roads/buildings)
First loop has some warmup time.
8-code search time is 2111ms
6-code search time is 45ms
4-code search time is 661ms
2-code search time is 2981ms
8-code search time is 1ms
6-code search time is 5ms
4-code search time is 363ms
2-code search time is 2815ms
8-code search time is 1ms
6-code search time is 7ms
4-code search time is 358ms
2-code search time is 3284ms
8-code search time is 1ms
6-code search time is 11ms
4-code search time is 363ms
2-code search time is 2602ms
8-code search time is 1ms
6-code search time is 36ms
4-code search time is 473ms
2-code search time is 3027ms
Average 8-code search time is 423ms
6-code search time would be 169200 linearly, is actually 104 (1626x faster)
Average 6-code search time is 20ms
4-code search time would be 8320 linearly, is actually 2218 (3x faster)
Average 4-code search time is 443ms
2-code search time would be 177440 linearly, is actually 14709 (12x faster)
Average 2-code search time is 2941ms
Decision: pulling 6-code data seems to provide the best ratio of data to time consumed. 
Note: This was run on partial server data. Re-run with global data in DB for more accurate results.

TestSpeedChangeByArea() 10/4/2020: (Using global data, with admin boundaries) (2-cells took over 30 seconds to load, excluding those)
First loop has some warmup time.
8-code search time is 1690ms
6-code search time is 77ms
4-code search time is 2495ms
8-code search time is 2ms
6-code search time is 44ms
4-code search time is 2440ms
8-code search time is 9ms
6-code search time is 56ms
4-code search time is 2630ms
8-code search time is 2ms
6-code search time is 50ms
4-code search time is 2504ms
8-code search time is 2ms
6-code search time is 58ms
4-code search time is 2317ms
Average 8-code search time is 341ms
6-code search time would be 136400 linearly, is actually 285 (478x faster)
Average 6-code search time is 57ms
4-code search time would be 22800 linearly, is actually 12386 (1x faster)
Average 4-code search time is 2477ms
Decision: Yes, Global data increases search times, noticeably on the 6-cell (~10x slower) and 4-cell (~6x slower) calls
Still, 6-code cells seem to provide the best data:time ratio. Users would not usually notice a 50ms wait, they would feel a 2300ms wait.


TestMapDataAbbrev() 10/1/2020
Full data time took 244ms
short data time took 97ms
Full data time took 19ms
short data time took 110ms
Full data time took 25ms
short data time took 72ms
Full data time took 20ms
short data time took 75ms
Full data time took 17ms
short data time took 64ms
Decision: the Select() transform adds processing time. We will not use the shorthand records.

TestGetPlacesPerf() 10/1/2020:
6code- Tracking: 2074ms VS NoTracking: 37ms VS Precompiled: 37ms
4code- Tracking: 569ms VS NoTracking: 399ms VS Precompiled: 448ms
6code- Tracking: 6ms VS NoTracking: 6ms VS Precompiled: 7ms
4code- Tracking: 344ms VS NoTracking: 462ms VS Precompiled: 461ms
6code- Tracking: 6ms VS NoTracking: 5ms VS Precompiled: 16ms
4code- Tracking: 356ms VS NoTracking: 369ms VS Precompiled: 521ms
6code- Tracking: 5ms VS NoTracking: 17ms VS Precompiled: 5ms
4code- Tracking: 404ms VS NoTracking: 369ms VS Precompiled: 426ms
6code- Tracking: 17ms VS NoTracking: 5ms VS Precompiled: 7ms
4code- Tracking: 412ms VS NoTracking: 448ms VS Precompiled: 451ms
Decision: Nothing here seems to make a significant different, though precompiling the query seems slower than expected.

TestMultiPassVsSinglePass() 10/7/2020:
Reading all types took 21552ms.
Reading water type took 21115ms.
Reading cemetery type took 20948ms.
Decision: Doing one pass takes the same time as doing multiple. Doing multiple passes takes up less RAM.
May consider doing multiple passes only on problem files, but should stick to single pass otherwise.

ConcurrentTest 10/13/2020
Both data sources populated. Starting test.
Standard list took 374785 ticks (37ms)
ConcurrentBag took 46264 ticks (4ms)
However, real-world testing shows ConcurrentBag<T> makes processing Ohio a minute slower, makes RAM contents vary a lot, never fully utilizes the CPU.
Because these use a ton of RAM, and I'm trying to work out how to limit RAM usage on the most problematic files, this won't be used.


Database Performance Results
Run this in Release mode for accurate numbers!
Starting SqlServer performance test.
1000 random reads done in 781ms
1000 random writes done in 775ms
Starting MariaDb performance test.

Run this in Release mode for accurate numbers!
Starting MariaDb performance test.
1000 random reads done in 1151ms
1000 random writes done in 1617ms
Decision: Sql Server will remain the default for testing purposes.
MariaDB appears to take twice as long on writes to spatial indexes, since this test specifically hit those.
I am curious about seeing these numbers change as load increases (this is with about 500MB of data)

TestIntersectsPreparedVsNot 1/21/21
Loading data for Intersect performance test.
Cell6 Data loaded.
Normal geometries search took 5957012 ticks (595ms)
Prepped Cell8 & Normal geometries search took 1780437 ticks (178ms)
Prepped List & Normal Cell8 search took 4779015 ticks (477ms), 1903363 ticks were prepping list
Decision: The correct option is to have 1 PreparedGeometry instance (the PlusCode cell we're looking at) do an Intersects() check on a list of places.

TestRasterVsVector 1/24/21:
Loading data for Raster Vs Vector performance test. 400 cell8 test.
Raster performance:5537ms
Vector performance:622ms
Loading data for Raster Vs Vector performance test. 400 cell10 test.
Raster performance:47ms
Vector performance:26ms
Decision: The new vector logic draws prettier tiles faster at essentially every scale. Twice as fast on small tiles, and quickly pulls ahead on larger ones.
I'll switch over to it. I may want to figure out some styling rules that can be defined in code (probably on AreaType class) that will let my maps become more flexible.
And I wouldn't have to be limited to drawing to a PlusCode size for pixels.

ImageSharpVsSkiaShapr 3/4/21:
(zoom 12)
Loading data for ImageSharp vs SkiaSharp performance test
ImageSharp performance:1262ms
SkiaSharp performance:518ms
(zoom 15)
Loading data for ImageSharp vs SkiaSharp performance test
ImageSharp performance:452ms
SkiaSharp performance:103ms
Decision: SkiaSharp wins. 2-4x faster. Looks identical. Simpler customization options.
