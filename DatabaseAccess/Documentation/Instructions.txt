Requirements: 16GB RAM (Will still page frequently with the most complicated areas, but they all finish in ~45 minutes in the worst case with an SSD)
Global database is current ~45GB, would want at least 64GB RAM for a DB server to hold everything in memory.

How to run this:

1) Create and configure SQL Server for this app. Update connection string, create DB via EFCore docs in Commands file.

2) Download the latest .osm files to use from Geofabrik.de and unzip them to the appropriate folder.

3) Assuming this is a first setup, Run OsmXmlParser with these arguments in order (separately, not all at once):
-trimXmlFiles(reads all .osm files in a folder, saves as JSON data to another folder. Crashes pretty often in .NET 5 Preview with extremely vague "System.EngineException" error. Will take several runs to complete)
-readSPOIs (Reads the JSON files that cover single interesting items, saves them to DB in SinglePointsOfInterest table)
-readRawWays (Reads the JSON files that save all the raw OSM way info, saves them to DB in MapData table)
-readProcessedWays (Reads the JSON files that contain condensed approximations of the ways, saves to the DB in ProcessedWays table)

4)... manually make spatial index in Sql Server. This takes ~40 minutes if you do it after importing global data, but it's core to making this app usable.
a baseline standard config for this index seems to work fine.

for changes that affect everything (EX: I changed tag types to process, i want new ways/updates from OSM), run OsmXmlParser with -resetXml and -resetJson, then follow step 3 again
For changes that only affect processedWays/SPOIs (EX: testing a better approximation algorithm for ProcessedWays, changing schema on SPOI db table), i can read in existing JSON files instead of OSM XML 

Server-side:
Set AWS Security rules to only allow RDP from a narrow range (single IP if possible, /24 block for ISP if not.)
deploy API app to its own folder, make sure IIS is pointing at folder with .exe and .dll files. Turn off Managed Code. 
Upload database file to S3, copy file to server (instructions how TBD)
Attach database to Sql Server (with or without SSMS installed? how TBD)


test API endpoint. /mapdata/test should return "OK" if IIS is up and running. actual data endpoint should return stuff with valid inputs if DB is running and connected correctly.
Should return something on error so I can figure out why a call doesnt work. I also think I need to upload a new DB to the server

Set these as the arguments for OsmXmlParser to redo everything at once:
-cleanDB -resetPbf -resetJson -trimPbfFiles -readSPOIs -readRawWays -removeDupes


Database side:
Querying spatial data:
DECLARE @p1 geography
  SET @p1 = geography::STGeomFromText('POINT (-53.235222 21.536760)', 4326)
  SELECT * FROM MapData
  WHERE @p1.STWithin(place) = 1



 Logic:
 * If a node has an interesting place tag, treat it as a single point of interest
 * If a way has an interesting place tag, and is a polygon or a linestring,
 ** Check if it's area is smaller than a 10-cell (.000125 degrees)
 *** If so, treat it as a single point of interest
 ** Make a MapData entry for the area.
 * If a relation has an interesting place tag, treat any areas inside it as that type.
 * Relations might be named by a node with a Label tag instead of a name tag on the relation.

